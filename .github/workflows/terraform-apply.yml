name: GitOps

on:
  push:
    branches:
      - '*'

jobs:
  publish:
    name: Publish Image
    runs-on: ubuntu-latest
    steps:
      - name: Set repo name
        run: |
          echo "REPO_NAME=$(echo ${{ github.event.repository.name }} | tr '[:upper:]' '[:lower:]' | tr '.' '-')" >>${GITHUB_ENV}
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Build with Docker
        run: |
          docker build -t ${{ secrets.container_registry_name }}.azurecr.io/$REPO_NAME/$REPO_NAME:${{ github.sha }} .
        shell: bash
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.azure_credentials }}
      - name: Push to Azure Container Registry
        env:
          AZURE_CREDENTIALS: ${{ secrets.azure_credentials }}
        run: |
          az acr login -n ${{ secrets.container_registry_name }}.azurecr.io
          docker push ${{ secrets.container_registry_name }}.azurecr.io/$REPO_NAME/$REPO_NAME:${{ github.sha }}
        shell: bash

  build-and-deploy:
    name: Build and Deploy
    needs: publish
    runs-on: ubuntu-22.04
    outputs:
      resource_group: ${{ steps.infrastructure-deployment.outputs.resource_group }}
      application_url: ${{ steps.infrastructure-deployment.outputs.application_url }}
    steps:
      - uses: actions/checkout@v4
      - name: Apply Terraform configuration
        id: infrastructure-deployment
        uses: ./.github/actions/apply-terraform
        with:
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}
          tf_storage_account: ${{ secrets.TF_STORAGE_ACCOUNT }}
          resource_group_name: ${{ secrets.RESOURCE_GROUP_NAME }}
          container_registry_name: ${{ secrets.CONTAINER_REGISTRY_NAME }}
  
  health-check:
    name: Health Check
    needs: build-and-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Perform Health Check
        env:
          APPLICATION_URL: ${{ needs.build-and-deploy.outputs.application_url }}
        run: |
          MAX_RETRIES=10
          RETRY_INTERVAL=30
          
          for i in $(seq 1 $MAX_RETRIES); do
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $APPLICATION_URL)
            if [ $HTTP_STATUS -eq 200 ]; then
              echo "Health check passed. Received HTTP 200 from $APPLICATION_URL"
              exit 0
            else
              echo "Attempt $i: Health check failed. Received HTTP $HTTP_STATUS from $APPLICATION_URL"
              if [ $i -lt $MAX_RETRIES ]; then
                echo "Retrying in $RETRY_INTERVAL seconds..."
                sleep $RETRY_INTERVAL
              fi
            fi
          done
          
          echo "Health check failed after $MAX_RETRIES attempts."
          exit 1
        shell: bash
